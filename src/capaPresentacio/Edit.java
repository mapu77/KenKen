/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package capaPresentacio;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JLabel;

/**
 *
 * @author Oriolcapo
 */
public class Edit extends javax.swing.JFrame {

    private ArrayList<String> ops;
    private int[][] mat;
    private String user, op;
    private javax.swing.JFrame parent;
    private CtrlPresentacio CP;
    private int N, X, Y, BZ, cont, RegionCount;
    /**
     * Creates new form Edit
     */

    public Edit() {
        initComponents();
        N = 3;
        init();
    }
    public Edit(int N, String u, javax.swing.JFrame p, CtrlPresentacio CP) {
        initComponents();
        this.CP = CP;
        this.N = N;
        this.user = u;
        this.parent = p;
        init();
        setVisible(true);
    }
    
    private void init() {
        ops = new ArrayList<String>();
        op = "";
        cont = RegionCount = 0;
        initMatriu();
        Toolkit tool = Toolkit.getDefaultToolkit();
        Dimension dim = new Dimension(tool.getScreenSize());
        int height = (int) dim.getHeight();
        int width = (int) dim.getWidth();
        setLocation(width/2 - getWidth()/2, height/2 - getHeight()/2);

    }
    
    private void initMatriu() {
        mat = new int[N][N];
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; ++j) {
                    mat[i][j] = -1;
            }
        }
        int alt = Tauler.getHeight();
        int bSize = alt/N;
        BZ = bSize;
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                JLabel b = new JLabel();
                Tauler.add(b);
                b.setBounds(j*bSize, i*bSize, bSize, bSize);
                b.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.black));
                b.setOpaque(true);                
                b.setBackground(Color.white);
                b.setText("");
                b.addMouseListener(new MouseAdapter() {
                    public void mouseClicked(MouseEvent e) {
                        X = b.getX();
                        Y = b.getY();
                        int valAct = mat[X/BZ][Y/BZ];
                        if (valAct == -1) {
                            desSelecciona(RegionCount,false);
                            DeleteRegionButton.setEnabled(false);
                            b.setBackground(Color.LIGHT_GRAY);
                            ++cont;
                            mat[X/BZ][Y/BZ] = RegionCount;
                            CountCeles.setText("Region with " + cont + " cells");
                        }
                        else if (valAct == RegionCount) {
                            b.setBackground(Color.white);
                            --cont;
                            mat[X/BZ][Y/BZ] = -1;
                            CountCeles.setText("Region with " + cont + " cells");
                        }
                        else {
                            DeleteRegionButton.setEnabled(true);
                            canviaColorRegio(X,Y,true);
                            desSelecciona(valAct,true);
                            CountCeles.setText("Region with " + contaCeles(X,Y) + " cells");
                            cont = 0;
                        }
                    }
                });
            }
        }
    }
    
    private void desSelecciona (int val, Boolean borra) {
        for (int i=0; i<N; ++i) {
            for (int j=0; j<N; ++j) {
                if (mat[i][j] != val) {
                    if (borra && mat[i][j] == RegionCount) mat[i][j] = -1;
                    JLabel label = (JLabel) Tauler.getComponentAt(i*BZ, j*BZ);
                    label.setBackground(Color.white);
                }
            }
        }
    }
    
    private int contaCeles(int X, int Y) {
        int val = mat[X/BZ][Y/BZ];
        int c = 0;
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (mat[i][j] == val) ++c;
            }
        }
        return c;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Tauler = new javax.swing.JPanel();
        Botons = new javax.swing.JPanel();
        CountCeles = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        BotoSuma = new javax.swing.JButton();
        BotoResta = new javax.swing.JButton();
        BotoMult = new javax.swing.JButton();
        BotoDiv = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ResultatText = new javax.swing.JTextField();
        BotoSet = new javax.swing.JButton();
        DeleteRegionButton = new javax.swing.JButton();
        errorRegionLabel = new javax.swing.JLabel();
        validateButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        validateLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        Tauler.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Tauler.setMaximumSize(new java.awt.Dimension(500, 500));
        Tauler.setMinimumSize(new java.awt.Dimension(500, 500));
        Tauler.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout TaulerLayout = new javax.swing.GroupLayout(Tauler);
        Tauler.setLayout(TaulerLayout);
        TaulerLayout.setHorizontalGroup(
            TaulerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        TaulerLayout.setVerticalGroup(
            TaulerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        Botons.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Botons.setMaximumSize(new java.awt.Dimension(186, 500));
        Botons.setMinimumSize(new java.awt.Dimension(186, 500));
        Botons.setPreferredSize(new java.awt.Dimension(186, 500));

        CountCeles.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        CountCeles.setText("Region with 0 cells");

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Operand:");

        BotoSuma.setBackground(new java.awt.Color(255, 255, 255));
        BotoSuma.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        BotoSuma.setText("+");
        BotoSuma.setMaximumSize(new java.awt.Dimension(70, 23));
        BotoSuma.setMinimumSize(new java.awt.Dimension(50, 23));
        BotoSuma.setPreferredSize(new java.awt.Dimension(70, 23));
        BotoSuma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotoSumaActionPerformed(evt);
            }
        });

        BotoResta.setBackground(new java.awt.Color(255, 255, 255));
        BotoResta.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        BotoResta.setText("-");
        BotoResta.setPreferredSize(new java.awt.Dimension(70, 23));
        BotoResta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotoRestaActionPerformed(evt);
            }
        });

        BotoMult.setBackground(new java.awt.Color(255, 255, 255));
        BotoMult.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        BotoMult.setText("x");
        BotoMult.setPreferredSize(new java.awt.Dimension(70, 23));
        BotoMult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotoMultActionPerformed(evt);
            }
        });

        BotoDiv.setBackground(new java.awt.Color(255, 255, 255));
        BotoDiv.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        BotoDiv.setText("/");
        BotoDiv.setPreferredSize(new java.awt.Dimension(70, 23));
        BotoDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotoDivActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Result:");

        ResultatText.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        BotoSet.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        BotoSet.setText("Set");
        BotoSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotoSetActionPerformed(evt);
            }
        });

        DeleteRegionButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        DeleteRegionButton.setText("Delete Region...");
        DeleteRegionButton.setEnabled(false);
        DeleteRegionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRegionButtonActionPerformed(evt);
            }
        });

        errorRegionLabel.setForeground(new java.awt.Color(255, 0, 0));

        validateButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        validateButton.setText("Validate KenKen");
        validateButton.setEnabled(false);
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        exitButton.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        validateLabel.setForeground(new java.awt.Color(51, 255, 51));

        javax.swing.GroupLayout BotonsLayout = new javax.swing.GroupLayout(Botons);
        Botons.setLayout(BotonsLayout);
        BotonsLayout.setHorizontalGroup(
            BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BotonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CountCeles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BotonsLayout.createSequentialGroup()
                        .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(validateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(validateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(BotonsLayout.createSequentialGroup()
                                .addComponent(errorRegionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10)
                                .addComponent(BotoSet))
                            .addComponent(ResultatText, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DeleteRegionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BotonsLayout.createSequentialGroup()
                                .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BotonsLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(BotonsLayout.createSequentialGroup()
                                                .addComponent(BotoSuma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(BotoResta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(BotonsLayout.createSequentialGroup()
                                                .addComponent(BotoMult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(BotoDiv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        BotonsLayout.setVerticalGroup(
            BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BotonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CountCeles, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotoSuma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotoResta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotoMult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BotoDiv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultatText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BotonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BotoSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(errorRegionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(DeleteRegionButton)
                .addGap(70, 70, 70)
                .addComponent(validateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/capaPresentacio/img/background.jpeg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(Botons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(Tauler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Tauler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Botons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel4)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 800, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotoSumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotoSumaActionPerformed
        // TODO add your handling code here:
        BotoSuma.setBackground(Color.GRAY);
        BotoResta.setBackground(Color.white);
        BotoMult.setBackground(Color.white);
        BotoDiv.setBackground(Color.white);
        op = "+";
    }//GEN-LAST:event_BotoSumaActionPerformed

    private void BotoRestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotoRestaActionPerformed
        // TODO add your handling code here:
        BotoSuma.setBackground(Color.white);
        BotoResta.setBackground(Color.GRAY);
        BotoMult.setBackground(Color.white);
        BotoDiv.setBackground(Color.white);
        op = "-";
    }//GEN-LAST:event_BotoRestaActionPerformed

    private void BotoMultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotoMultActionPerformed
        // TODO add your handling code here:
        BotoSuma.setBackground(Color.white);
        BotoResta.setBackground(Color.white);
        BotoMult.setBackground(Color.GRAY);
        BotoDiv.setBackground(Color.white);
        op = "x";
    }//GEN-LAST:event_BotoMultActionPerformed

    private void BotoDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotoDivActionPerformed
        // TODO add your handling code here:
        BotoSuma.setBackground(Color.white);
        BotoResta.setBackground(Color.white);
        BotoMult.setBackground(Color.white);
        BotoDiv.setBackground(Color.GRAY);
        op = "/";
    }//GEN-LAST:event_BotoDivActionPerformed

    private void BotoSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotoSetActionPerformed
        // TODO add your handling code here:
        boolean ok = true;
        try {
            int a = Integer.parseInt(ResultatText.getText());
            if (a <= 0) ok = false;
        }
        catch (Exception NumberFormatException) {
             ok = false;
        }
        if (validaRegio() && ok && !op.equals("")) {
            boolean found = false;
            for (int j=0; j<N && !found; ++j) {
                for (int i=0; i<N && !found; ++i) {
                    if (mat[i][j] == RegionCount) {
                        found = true;
                        JLabel lab = (JLabel) Tauler.getComponentAt(i*BZ,j*BZ);
                        String res = ResultatText.getText();
                        JLabel in = new JLabel(op+res);
                        lab.add(in);
                        in.setBounds(5, 0, BZ/2, BZ/2);
                        ++RegionCount;
                        cont = 0;
                        CountCeles.setText("Region with " + cont + " cells");
                        setBorders();
                        canviaColorRegio(i*BZ,j*BZ,false);
                    }
                }
            }
            ResultatText.setText("");
            BotoSuma.setBackground(Color.white);
            BotoResta.setBackground(Color.white);
            BotoMult.setBackground(Color.white);
            BotoDiv.setBackground(Color.white);
            op = "";
            errorRegionLabel.setText("<html></html>");
            if (KKcomplet()) validateButton.setEnabled(true);
        }
        else {
            if (op.equals("")) errorRegionLabel.setText("<html>Select an operand</html>");
            else if (!ok) errorRegionLabel.setText("<html>Invalid Result</html>");
            else errorRegionLabel.setText("<html>Invalid Region</html>");
        }
    }//GEN-LAST:event_BotoSetActionPerformed

    private void DeleteRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRegionButtonActionPerformed
        // TODO add your handling code here:
        canviaColorRegio(X, Y, false);
        eliminaRegio(X,Y);
        cont = 0;
        CountCeles.setText("Region with " + cont + " cells");
        int val = mat[X/BZ][Y/BZ];
        for (int i=0; i<BZ*N; i+=BZ) {
            for (int j=0; j<BZ*N; j+=BZ) {
                if (mat[i/BZ][j/BZ]==val) {
                    JLabel lab = (JLabel) Tauler.getComponentAt(i,j);
                    if (lab.getComponentCount()>0) {
                        lab.remove(0);
                    }
                }
            }
        }
        DeleteRegionButton.setEnabled(false);
        
    }//GEN-LAST:event_DeleteRegionButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        // TODO add your handling code here:
        for (int j=0; j<N; j++) {
            for (int i=0; i<N; i++) {
                JLabel lab = (JLabel) Tauler.getComponentAt(i*BZ, j*BZ);
                if (lab.getComponentCount() == 1) {
                    JLabel lab2 = (JLabel) lab.getComponent(0);
                    ops.add(lab2.getText());
                }
            }
        }
        if (CP.validaKenKen(mat,ops)) validateLabel.setText("You KenKen is correct");
    }//GEN-LAST:event_validateButtonActionPerformed

    private boolean KKcomplet () {
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (mat[i][j] == -1) return false;
            }
        }
        return true;
    }
    
    private class Pair {
        private int x, y;
        public Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
        
        public int getX() {
            return x;
        }
        
        public int getY() {
            return y;
        }
    }
    
    private boolean validaRegio() {
        boolean ok = false;
        int numC = 0, I, J;
        Pair p = null;
        for (int i=0; i<N && !ok; i++) {
            for (int j=0; j<N && !ok; j++) {
                if (mat[i][j] == RegionCount) {
                    if (contaCeles(i*BZ,j*BZ) == 1) return true;
                    numC = contaCeles(i*BZ,j*BZ);
                    p = new Pair(i,j);
                    ok = true;
                }
            }
        }
        if (!ok) return false;
        Stack<Pair> S = new Stack<Pair>();
        Vector<Component> V = new Vector<Component>();
        S.push(p);
        V.add(Tauler.getComponent(p.getX()*N+p.getY()));
        JLabel c;
        while (! S.empty()) {
            Pair aux = S.peek();
            S.pop();
            Pair top = new Pair(aux.getX()-1,aux.getY());
            if (top.getX() >= 0 && mat[top.getX()][top.getY()] == RegionCount) {
                c = (JLabel) Tauler.getComponent(top.getX()*N+top.getY());
                if (!V.contains(c)){
                    S.push(top);
                    V.add(c);
                }
            }
            
            Pair bot = new Pair(aux.getX()+1,aux.getY());
            if (bot.getX() < N && mat[bot.getX()][bot.getY()] == RegionCount) {
                c = (JLabel) Tauler.getComponent(bot.getX()*N+bot.getY());
                if (!V.contains(c)) {
                    S.push(bot);
                    V.add(c);
                }
            }
            
            Pair left = new Pair(aux.getX(),aux.getY()-1);
            if (left.getY() >= 0 && mat[left.getX()][left.getY()] == RegionCount) {
                c = (JLabel) Tauler.getComponent(left.getX()*N+left.getY());
                if (!V.contains(c)) {
                    S.push(left);
                    V.add(c);
                }
            }
            
            Pair right = new Pair(aux.getX(),aux.getY()+1);
            if (right.getY() < N && mat[right.getX()][right.getY()] == RegionCount) {
                c = (JLabel) Tauler.getComponent(right.getX()*N+right.getY());
                if (!V.contains(c)) {
                    S.push(right);
                    V.add(c);
                }
            }
        }
        return V.size() == numC;
    }
    
    private void eliminaRegio(int X, int Y) {
        int val = mat[X/BZ][Y/BZ];
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (mat[i][j] == val) {
                    mat[i][j] = -1;
                    setBorders();
                }
            }
        }
    }

    
    private void canviaColorRegio(int X, int Y, Boolean b) {
        int val = mat[X/BZ][Y/BZ];
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (mat[i][j] == val) {
                    JLabel label = (JLabel) Tauler.getComponentAt(i*BZ,j*BZ);
                    if (b) label.setBackground(Color.LIGHT_GRAY);
                    else label.setBackground(Color.white);
                }
            }
        }
    }
    
    private void setBorders() {
        int n = N-1;
        for (int i=0; i<N; ++i) {
            for (int j=0; j<N; ++j) {
                int Me = mat[i][j];
                int u=1,d=1,l=1,r=1;

                if (i == 0) {
                    u+=2;
                    if (Me != mat[i+1][j]) d+=1;
                    if (j>0 && j<n) {
                        if (Me != mat[i][j+1]) r+=1;
                        if (Me != mat[i][j-1]) l+=1;
                    }
                }
                else if (i == n) {
                    d+=2;
                    if (Me != mat[i-1][j]) u+=1;
                    if (j>0 && j<n) {
                        if (Me != mat[i][j+1]) r+=1;
                        if (Me != mat[i][j-1]) l+=1;
                    }
                }
                if (j == 0) {
                    l+=2;
                    if (Me != mat[i][j+1]) r+=1;
                    if (i>0 && i<n) {
                        if (Me != mat[i+1][j]) d+=1;
                        if (Me != mat[i-1][j]) u+=1;
                    }
                }
                if (j == n) {
                    r+=2;
                    if (Me != mat[i][j-1]) l+=1;
                    if (i>0 && i<n) {
                        if (Me != mat[i+1][j]) d+=1;
                        if (Me != mat[i-1][j]) u+=1;
                    }
                }
                if (i!=0 && i!=n && j!=0 && j!=n) {
                    if (Me != mat[i+1][j]) d+=1;
                    if (Me != mat[i-1][j]) u+=1;
                    if (Me != mat[i][j+1]) r+=1;
                    if (Me != mat[i][j-1]) l+=1;
                }
                JLabel label = (JLabel) Tauler.getComponentAt(i*BZ,j*BZ);
                label.setBorder(BorderFactory.createMatteBorder(l,u,r,d,Color.black));
                //label.setBorder(BorderFactory.createMatteBorder(u,l,d,r,Color.black));
                
            }
        }
    }
    
/*    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Edit().setVisible(true);
            }
        });
    }*/
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotoDiv;
    private javax.swing.JButton BotoMult;
    private javax.swing.JButton BotoResta;
    private javax.swing.JButton BotoSet;
    private javax.swing.JButton BotoSuma;
    private javax.swing.JPanel Botons;
    private javax.swing.JLabel CountCeles;
    private javax.swing.JButton DeleteRegionButton;
    private javax.swing.JTextField ResultatText;
    private javax.swing.JPanel Tauler;
    private javax.swing.JLabel errorRegionLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton validateButton;
    private javax.swing.JLabel validateLabel;
    // End of variables declaration//GEN-END:variables
}
